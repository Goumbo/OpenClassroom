<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="viewRepresentation">
    <entry key="jsNamespace" type="xstring" value="knimePieChart"/>
    <config key="jsCode">
        <entry key="array-size" type="xint" value="1"/>
        <entry key="0" type="xstring" value="/* global d3:false, kt:false, nv:false */%%00010window.knimePieChart = (function () {%%00010    var pie = {};%%00010    var MIN_HEIGHT = 100;%%00010    var MIN_WIDTH = 100;%%00010    var MISSING_VALUES_ONLY = 'missingValuesOnly';%%00010    var NO_DATA_AVAILABLE = 'noDataAvailable';%%00010%%00010    var _representation,%%00010        _value,%%00010        layoutContainer,%%00010        chart,%%00010        svg,%%00010        knimeTable,%%00010        plotData,%%00010        excludeCat,%%00010        missValCatValue,%%00010        _translator,%%00010        _keyNameMap,%%00010        _incomingTable,%%00010        showWarnings,%%00010%%00010        /**%%00010         * Function declarations%%00010         */%%00010        subscribeToSelection, drawChart, drawControls, getClusterToRowMapping, sortByClusterName, processData,%%00010        setColorRange, setCssClasses, redrawSelection, removeHilightBar, setTooltipCssClasses, hideTooltips,%%00010        updateTitles, publishSelection, handleHighlightClick, createHilightBar, checkClearSelectionButton,%%00010        onSelectionChanged, getSelectedRowIDs, selectCorrectBar, processMissingValues, colorScale, // updateData%%00010%%00010        /**%%00010         * Helper classes%%00010         */%%00010        KeyNameMap;%%00010%%00010    pie.init = function (representation, value) {%%00010        _representation = representation;%%00010        _value = value;%%00010        _incomingTable = _representation.inObjects[0].table;%%00010%%00010        if (_representation.options.enableSelection &amp;&amp; _representation.inObjects[0].translator) {%%00010            _translator = _representation.inObjects[0].translator;%%00010            _translator.sourceID = _representation.inObjects[0].uuid;%%00010            _translator.targetIDs = [_representation.tableIds[0]];%%00010            knimeService.registerSelectionTranslator(_translator, _translator.sourceID);%%00010            subscribeToSelection(_value.options.subscribeToSelection);%%00010        }%%00010%%00010        showWarnings = _representation.options.showWarnings;%%00010%%00010        if (_representation.warnMessage &amp;&amp; showWarnings) {%%00010            knimeService.setWarningMessage(_representation.warnMessage);%%00010        }%%00010%%00010        drawChart(false);%%00010        if (_representation.options.enableViewControls) {%%00010            drawControls();%%00010        }%%00010        _keyNameMap = new KeyNameMap(getClusterToRowMapping());%%00010    };%%00010%%00010    drawChart = function (redraw) {%%00010        // Parse the options%%00010        var optTitle = _value.options.title;%%00010        var optSubtitle = _value.options.subtitle;%%00010%%00010        var showLabels = _value.options.showLabels;%%00010        var labelThreshold = _representation.options.labelThreshold;%%00010        var labelType = _value.options.labelType.toLowerCase();%%00010%%00010        var optDonutChart = _value.options.togglePie;%%00010        var holeSize = _value.options.holeSize;%%00010        var optInsideTitle = _value.options.insideTitle;%%00010%%00010        var showLegend = _representation.options.legend;%%00010%%00010        var optFullscreen = _representation.options.svg.fullscreen &amp;&amp; _representation.runningInView;%%00010        var optWidth = _representation.options.svg.width;%%00010        var optHeight = _representation.options.svg.height;%%00010%%00010        var optEnableSelection = _representation.options.enableSelection;%%00010%%00010        var isTitle = optTitle || optSubtitle;%%00010%%00010        /*%%00010         * Setup interactive controls%%00010         */%%00010%%00010        d3.select('html').style('width', '100%').style('height', '100%');%%00010        d3.select('body').style('width', '100%').style('height', '100%');%%00010%%00010        var body = d3.select('body');%%00010%%00010        var width = optWidth + 'px';%%00010        var height = optHeight + 'px';%%00010        if (optFullscreen) {%%00010            width = '100%';%%00010            height = isTitle ? '100%' : 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010        }%%00010%%00010        var div;%%00010        if (redraw) {%%00010            d3.select('svg').remove();%%00010            div = d3.select('#svgContainer');%%00010        } else {%%00010            layoutContainer = body.append('div').attr('id', 'layoutContainer').attr('class', 'knime-layout-container')%%00010                .style('width', width).style('height', height).style('min-width', MIN_WIDTH + 'px').style('min-height',%%00010                    MIN_HEIGHT + 'px');%%00010%%00010            div = layoutContainer.append('div').attr('id', 'svgContainer').attr('class', 'knime-svg-container').style(%%00010                'min-width', MIN_WIDTH + 'px').style('min-height', MIN_HEIGHT + 'px');%%00010        }%%00010%%00010        /*%%00010         * Process data%%00010         */%%00010        knimeTable = new kt();%%00010        // Add the data from the input port to the knimeTable.%%00010        var port0dataTable = _representation.inObjects[0].table;%%00010        port0dataTable.rows = sortByClusterName(port0dataTable.rows);%%00010        knimeTable.setDataTable(port0dataTable);%%00010%%00010        processData(true);%%00010        setColorRange();%%00010%%00010        // Create the SVG object%%00010        var svg1 = document.createElementNS('http://www.w3.org/2000/svg', 'svg');%%00010        div[0][0].appendChild(svg1);%%00010%%00010        svg = d3.select('svg').style('display', 'block');%%00010%%00010        if (optFullscreen) {%%00010            // Set full screen height/width%%00010            div.style('width', '100%');%%00010            div.style('height', height);%%00010%%00010            svg.attr('width', '100%');%%00010        } else {%%00010            svg.attr('height', '100%');%%00010            if (optWidth &gt; 0) {%%00010                div.style('width', optWidth + 'px');%%00010                svg.attr('width', optWidth);%%00010            }%%00010            if (optHeight &gt; 0) {%%00010                svg.attr('height', optHeight);%%00010                div.style('height', optHeight + 'px');%%00010            }%%00010        }%%00010%%00010        // Pie chart%%00010        nv.addGraph(function () {%%00010            chart = nv.models.pieChart().x(function (d) {%%00010                return d.label;%%00010            }).y(function (d) {%%00010                return d.value;%%00010            }).color(function(category){%%00010                return colorScale(category.label);%%00010            }).duration(0).showLegend(showLegend).showLabels(showLabels).labelThreshold(%%00010                labelThreshold).labelType(labelType); // &quot;key&quot;, &quot;value&quot; or &quot;percent&quot;%%00010%%00010            chart.dispatch.on('renderEnd.css', function () {%%00010                setCssClasses();%%00010                redrawSelection();%%00010            });%%00010            // tooltip is re-created every time therefore we need to assign classes accordingly%%00010            chart.pie.dispatch.on('elementMouseover.tooltipCss', setTooltipCssClasses);%%00010            chart.pie.dispatch.on('elementMouseout.tooltipCss', hideTooltips);%%00010            chart.pie.dispatch.on('elementMousemove.tooltipCss', setTooltipCssClasses);%%00010            chart.pie.dispatch.on('elementMouseout.tooltipCss', hideTooltips);%%00010            chart.legend.dispatch.on('legendClick', function (series, index) {%%00010                // drawChart(true);%%00010                removeHilightBar('', true);%%00010                d3.event.stopPropagation();%%00010            });%%00010%%00010            chart.width(optFullscreen ? '100%' : optWidth);%%00010            chart.height(optFullscreen ? '100%' : optHeight);%%00010            chart.margin({%%00010                top: 0,%%00010                bottom: 0,%%00010                left: 20,%%00010                right: 0%%00010            });%%00010%%00010            // TODO: Add a mechanism to remember the categories that are%%00010            // switched on.%%00010%%00010            chart.donut(optDonutChart);%%00010            chart.donutRatio(holeSize);%%00010            if (optInsideTitle) {%%00010                chart.title(optInsideTitle);%%00010            }%%00010            updateTitles(false);%%00010%%00010            // checking if all the pies are 0s%%00010            if (plotData.filter(function (d) {%%00010                return d.value !== 0;%%00010            }).length === 0) {%%00010                svg.append('text').attr('x', 20).attr('y', 80).attr('font-size', 20).attr('fill', 'red').text(%%00010                    'The plot is empty because all values are equal to 0.');%%00010            } else {%%00010                svg.datum(plotData).transition().duration(0).call(chart);%%00010            }%%00010            // nv.utils.windowResize(chart.update);%%00010            nv.utils.windowResize(function () {%%00010                chart.update();%%00010                removeHilightBar('', true);%%00010                redrawSelection();%%00010            });%%00010%%00010            if (optEnableSelection) {%%00010                svg.on('click', function () {%%00010                    removeHilightBar('', true);%%00010                    _value.options.selection = [];%%00010                    publishSelection(true);%%00010                });%%00010            }%%00010%%00010            // redraws selection%%00010            redrawSelection();%%00010%%00010            return chart;%%00010        });%%00010    };%%00010%%00010    sortByClusterName = function (array) {%%00010        return array.sort(function (a, b) {%%00010            var x = a.data[0];%%00010            var y = b.data[0];%%00010%%00010            // Make sure, that missing values are displayed last%%00010            if (x === null) {%%00010                return 1;%%00010            } else if (y === null) {%%00010                return -1;%%00010            }%%00010%%00010            if (typeof x === 'string') {%%00010                x = (String(x)).toLowerCase();%%00010            }%%00010            if (typeof y === 'string') {%%00010                y = (String(y)).toLowerCase();%%00010            }%%00010            return ((x &lt; y) ? -1 : ((x &gt; y) ? 1 : 0));%%00010        });%%00010    };%%00010%%00010    function registerClickHandler() {%%00010        d3.selectAll('.nv-slice').on('click', function (event) {%%00010            handleHighlightClick(event);%%00010            d3.event.stopPropagation();%%00010        });%%00010    }%%00010%%00010    redrawSelection = function () {%%00010        var length = _value.options.selection ? _value.options.selection.length : 0;%%00010        for (var i = 0; i &lt; length; i++) {%%00010            createHilightBar(_keyNameMap.getNameFromKey(_value.options.selection[i][0]),%%00010                _value.options.selection[i][1]);%%00010        }%%00010    };%%00010%%00010    subscribeToSelection = function (subscribeBool) {%%00010        if (_representation.options.enableSelection) {%%00010            if (subscribeBool) {%%00010                knimeService.subscribeToSelection(_translator.sourceID, onSelectionChanged);%%00010            } else {%%00010                knimeService.unsubscribeSelection(_translator.sourceID, onSelectionChanged);%%00010            }%%00010        }%%00010    };%%00010%%00010    publishSelection = function (shouldPublish) {%%00010        if (shouldPublish) {%%00010            knimeService.setSelectedRows(_translator.sourceID, getSelectedRowIDs(), _translator.sourceID);%%00010        }%%00010    };%%00010%%00010    checkClearSelectionButton = function () {%%00010        var button = d3.select('#clearSelectionButton');%%00010        if (button) {%%00010            button.classed('inactive', function () {%%00010                return !_value.options.selection.length &gt; 0;%%00010            });%%00010        }%%00010    };%%00010%%00010    getSelectedRowIDs = function () {%%00010        if (_value.options.selection) {%%00010            var selectedRowIDs = [];%%00010            for (var i = 0; i &lt; _value.options.selection.length; i++) {%%00010                selectedRowIDs.push(_value.options.selection[i][0]);%%00010            }%%00010            return selectedRowIDs;%%00010        } else {%%00010            return [];%%00010        }%%00010    };%%00010%%00010    // Removes the clusterName with the given cluster name. If &quot;removeAll&quot; is true all bars are removed%%00010    removeHilightBar = function (clusterName, removeAll) {%%00010        if (removeAll) {%%00010            var length = _value.options.selection ? _value.options.selection.length : 0;%%00010            for (var i = 0; i &lt; length; i++) {%%00010                d3.selectAll('.hilightBar').remove();%%00010            }%%00010        } else {%%00010            var barIndex = getSelectedRowIDs().indexOf(_keyNameMap.getKeyFromName(clusterName));%%00010            if (barIndex &gt; -1) {%%00010                let pie = selectCorrectBar(clusterName);%%00010                if (pie) {%%00010                    pie.remove();%%00010                }%%00010            }%%00010        }%%00010    };%%00010%%00010    selectCorrectBar = function (clusterName) {%%00010        let allSlices = d3.selectAll('.nv-slice');%%00010        for (var j = 0; j &lt; allSlices[0].length; j++) {%%00010            if (d3.select(allSlices[0][j]).data()[0].data.label === clusterName) {%%00010                return d3.select(allSlices[0][j]).select('.hilightBar');%%00010            }%%00010        }%%00010        return null;%%00010    };%%00010%%00010    // Create a hilight-bar above the cluster with the given name and assigns the given css class to it%%00010    createHilightBar = function (clusterName, selectionClass) {%%00010        for (var j = 0; j &lt; plotData.length; j++) {%%00010            if (plotData[j].label === clusterName) {%%00010                var slices = d3.selectAll('.nv-slice');%%00010                for (var i = 0; i &lt; slices[0].length; i++) {%%00010                    if (i === j) {%%00010                        var slice = d3.select(slices[0][i]).select('path');%%00010                        var availableWidth = chart.width() - 20;%%00010                        var availableHeight = chart.height();%%00010                        var radius = Math.min(availableWidth, availableHeight) / 2;%%00010                        var selectionTitle;%%00010                        if (selectionClass === 'knime-selected') {%%00010                            selectionTitle = 'Selected';%%00010                        } else {%%00010                            selectionTitle = 'Partially selected';%%00010                        }%%00010                        // PieChart Code%%00010                        var arc = d3.svg.arc().innerRadius((radius - radius / 5))%%00010                            .outerRadius((radius - radius / 5) + 8).startAngle(slice.data()[0].startAngle) // converting%%00010                                                                                                            // from degs%%00010                                                                                                            // to%%00010                                                                                                            // radians%%00010                            .endAngle(slice.data()[0].endAngle); // just radians%%00010                        slice.select(function () {%%00010                            return this.parentNode;%%00010                        }).append('path').attr('d', arc).classed('hilightBar', true).classed(selectionClass, true)%%00010                            .append('title').classed('knime-tooltip', true).text(selectionTitle);%%00010                    }%%00010                }%%00010            }%%00010        }%%00010    };%%00010%%00010    getClusterToRowMapping = function () {%%00010        var map = {};%%00010        for (var i = 0; i &lt; _incomingTable.rows.length; i++) {%%00010            if (_incomingTable.rows[i].data[0]) {%%00010                map[_incomingTable.rows[i].data[0]] = _incomingTable.rows[i].rowKey;%%00010            } else {%%00010                map['Missing values'] = _incomingTable.rows[i].rowKey;%%00010            }%%00010        }%%00010        return map;%%00010    };%%00010%%00010    // Helper class to handle conversion from cluster name to row key%%00010    KeyNameMap = function (map) {%%00010        this.map = map;%%00010        this.reverseMap = {};%%00010        for (var key in map) {%%00010            var value = map[key];%%00010            this.reverseMap[value] = key;%%00010        }%%00010    };%%00010%%00010    KeyNameMap.prototype.getKeyFromName = function (name) {%%00010        return this.map[name];%%00010    };%%00010%%00010    KeyNameMap.prototype.getNameFromKey = function (key) {%%00010        return this.reverseMap[key];%%00010    };%%00010%%00010    handleHighlightClick = function (event) {%%00010        if (!_value.options.selection) {%%00010            _value.options.selection = [];%%00010        }%%00010        var clusterName = event.data.label;%%00010        var clusterKey = _keyNameMap.getKeyFromName(clusterName);%%00010        var barIndex = getSelectedRowIDs().indexOf(clusterKey);%%00010        // Deselect already selected bar when clicking again on it%%00010        if (barIndex &gt; -1 &amp;&amp; (d3.event.ctrlKey || d3.event.shiftKey || d3.event.metaKey)) {%%00010            if (_representation.options.enableSelection) {%%00010                if (_value.options.publishSelection) {%%00010                    knimeService.removeRowsFromSelection(_translator.sourceID, [clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            removeHilightBar(clusterName, false);%%00010            _value.options.selection.splice(barIndex, 1);%%00010        } else if (!d3.event.ctrlKey &amp;&amp; !d3.event.shiftKey &amp;&amp; !d3.event.metaKey) {%%00010            // Deselect all previously selected bars and select the newly clicked one%%00010            if (_representation.options.enableSelection) {%%00010                if (_value.options.publishSelection) {%%00010                    knimeService.setSelectedRows(_translator.sourceID, [clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            removeHilightBar(clusterName, true);%%00010            _value.options.selection = [];%%00010            createHilightBar(clusterName, 'knime-selected');%%00010            _value.options.selection.push([clusterKey, 'knime-selected']);%%00010        } else {%%00010            // Select the clicked bar, as it is either a new selection or a additional selection%%00010            if (_representation.options.enableSelection) {%%00010                if (_value.options.publishSelection) {%%00010                    knimeService.addRowsToSelection(_translator.sourceID, [clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            createHilightBar(clusterName, 'knime-selected');%%00010            _value.options.selection.push([clusterKey, 'knime-selected']);%%00010        }%%00010        checkClearSelectionButton();%%00010    };%%00010%%00010    onSelectionChanged = function (data) {%%00010        if (!_value.options.selection) {%%00010            _value.options.selection = [];%%00010        }%%00010        if (data.reevaluate) {%%00010            removeHilightBar('', true);%%00010            var selectedRows = knimeService.getAllRowsForSelection(_translator.sourceID);%%00010            var partiallySelectedRows = knimeService.getAllPartiallySelectedRows(_translator.sourceID);%%00010            _value.options.selection = [];%%00010            for (let selectedRow in selectedRows) {%%00010                let length = _value.options.selection.length;%%00010                _value.options.selection[length] = [selectedRows[selectedRow], 'knime-selected'];%%00010                createHilightBar(_keyNameMap.getNameFromKey(selectedRows[selectedRow]), 'knime-selected');%%00010            }%%00010            for (let partiallySelectedRow in partiallySelectedRows) {%%00010                let length = _value.options.selection.length;%%00010                _value.options.selection[length] = [partiallySelectedRows[partiallySelectedRow],%%00010                    'knime-partially-selected'];%%00010                createHilightBar(_keyNameMap.getNameFromKey(partiallySelectedRows[partiallySelectedRow]),%%00010                    'knime-partially-selected');%%00010            }%%00010        } else if (data.changeSet) {%%00010            if (data.changeSet.removed) {%%00010                data.changeSet.removed.map(function (rowId) {%%00010                    var clusterName = rowId;%%00010                    var index = getSelectedRowIDs().indexOf(clusterName);%%00010                    if (index &gt; -1) {%%00010                        removeHilightBar(_keyNameMap.getNameFromKey(rowId), false);%%00010                        _value.options.selection.splice(index, 1);%%00010                    }%%00010                    return null;%%00010                });%%00010            }%%00010            if (data.changeSet.partialRemoved) {%%00010                data.changeSet.partialRemoved.map(function (rowId) {%%00010                    var clusterName = rowId;%%00010                    var index = getSelectedRowIDs().indexOf(clusterName);%%00010                    if (index &gt; -1) {%%00010                        removeHilightBar(_keyNameMap.getNameFromKey(rowId), false);%%00010                        _value.options.selection.splice(index, 1);%%00010                    }%%00010                    return null;%%00010                });%%00010            }%%00010            if (data.changeSet.added) {%%00010                data.changeSet.added.map(function (rowId) {%%00010                    var index = getSelectedRowIDs().indexOf(rowId);%%00010                    if (index === -1) {%%00010                        _value.options.selection.push([rowId, 'knime-selected']);%%00010                        createHilightBar(_keyNameMap.getNameFromKey(rowId), 'knime-selected');%%00010                    }%%00010                    return null;%%00010                });%%00010            }%%00010            if (data.changeSet.partialAdded) {%%00010                data.changeSet.partialAdded.map(function (rowId) {%%00010                    var index = getSelectedRowIDs().indexOf(rowId);%%00010                    if (index === -1) {%%00010                        _value.options.selection.push([rowId, 'knime-partially-selected']);%%00010                        createHilightBar(_keyNameMap.getNameFromKey(rowId), 'knime-partially-selected');%%00010                    }%%00010                    return null;%%00010                });%%00010            }%%00010        }%%00010        checkClearSelectionButton();%%00010    };%%00010%%00010    /*%%00010     * updateData = function (updateChart) { processData(); if (updateChart) { chart.update(); } };%%00010     */%%00010%%00010    updateTitles = function (updateChart) {%%00010        if (chart) {%%00010            var curTitle = d3.select('#title');%%00010            var curSubtitle = d3.select('#subtitle');%%00010            var chartNeedsUpdating = curTitle.empty() !== !_value.options.title ||%%00010                curSubtitle.empty() !== !_value.options.subtitle;%%00010            if (!_value.options.title) {%%00010                curTitle.remove();%%00010            }%%00010            if (_value.options.title) {%%00010                if (curTitle.empty()) {%%00010                    svg.append('text').attr('x', 20).attr('y', 30).attr('id', 'title').attr('class', 'knime-title')%%00010                        .text(_value.options.title);%%00010                } else {%%00010                    curTitle.text(_value.options.title);%%00010                }%%00010            }%%00010            if (!_value.options.subtitle) {%%00010                curSubtitle.remove();%%00010            }%%00010            if (_value.options.subtitle) {%%00010                if (curSubtitle.empty()) {%%00010                    svg.append('text').attr('x', 20).attr('y', _value.options.title ? 46 : 20).attr('id', 'subtitle')%%00010                        .attr('class', 'knime-subtitle').text(_value.options.subtitle);%%00010                } else {%%00010                    curSubtitle.text(_value.options.subtitle).attr('y', _value.options.title ? 46 : 20);%%00010                }%%00010            }%%00010%%00010            var topMargin = 10;%%00010            topMargin += _value.options.title ? 10 : 0;%%00010            topMargin += _value.options.subtitle ? 8 : 0;%%00010            chart.legend.margin({%%00010                top: topMargin,%%00010                bottom: topMargin%%00010            });%%00010            chart.margin({%%00010                top: topMargin,%%00010                bottom: topMargin%%00010            });%%00010%%00010            var isTitle = _value.options.title || _value.options.subtitle;%%00010            knimeService.floatingHeader(isTitle);%%00010%%00010            if (updateChart &amp;&amp; chartNeedsUpdating) {%%00010                if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView) {%%00010                    var height = isTitle ? '100%' : 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010                    layoutContainer.style('height', height)%%00010                    // two rows below force to invalidate the container which solves a weird problem with vertical%%00010                    // scroll bar in IE%%00010                    .style('display', 'none').style('display', 'block');%%00010                    d3.select('#svgContainer').style('height', height);%%00010                }%%00010                chart.update();%%00010            }%%00010        }%%00010    };%%00010%%00010    processData = function (setColorRange) {%%00010        var optMethod = _representation.options.aggr;%%00010        var optCat = _representation.options.cat;%%00010        var optFreqCol = _value.options.freq;%%00010%%00010        var categories = knimeTable.getColumn(optCat);%%00010%%00010        var valCol;%%00010        if (optMethod === 'Occurence\u00A0Count') {%%00010            valCol = knimeTable.getColumn(1);%%00010        } else {%%00010            valCol = knimeTable.getColumn(optFreqCol);%%00010        }%%00010%%00010        plotData = [];%%00010        excludeCat = [];%%00010        missValCatValue = null;%%00010        if (valCol.length &gt; 0) {%%00010            var numDataPoints = valCol.length;%%00010            for (var i = 0; i &lt; numDataPoints; i++) {%%00010                var label = categories[i];%%00010                var value = valCol[i];%%00010%%00010                if (label === null) {%%00010                    // missing values category%%00010                    // save the value to append as the last item%%00010                    missValCatValue = value;%%00010                    continue;%%00010                }%%00010%%00010                if (value === null) {%%00010                    // category has only missing values - exclude it%%00010                    excludeCat.push(label);%%00010                    continue;%%00010                }%%00010%%00010                var plotStream = {%%00010                    label: label,%%00010                    value: Math.abs(value)%%00010                // take abs value to prevent a damaged plot%%00010                };%%00010                plotData.push(plotStream);%%00010            }%%00010        }%%00010%%00010        processMissingValues(false);%%00010    };%%00010%%00010    setColorRange = function () {%%00010        var numCat = plotData.length;%%00010        if (missValCatValue !== null) {%%00010            // We don't want the option &quot;includeMissValCat&quot; to influence on the number of categories,%%00010            // because the option can be changed in the view and the color scale then can also be changed (if a border%%00010            // case) - and we don't want this.%%00010            // Hence, only the real value matters.%%00010            numCat++;%%00010        }%%00010        if (_representation.options.customColors) {%%00010            var colorRange = [];%%00010            var possibleValues = [];%%00010            colorRange = _representation.inObjects[0].table.spec.colorModels[0].colors;%%00010            possibleValues = _representation.inObjects[0].table.spec.colorModels[0].labels;%%00010            if (_representation.options.enableSwitchMissValCat) {%%00010                colorRange.push('#7C7C7C');%%00010                possibleValues.push('Missing values');%%00010            }%%00010            colorScale = d3.scale.ordinal().domain(possibleValues)%%00010                .range(colorRange);%%00010        } else {%%00010            if (numCat &gt; 10) {%%00010                colorScale = d3.scale.category20();%%00010            } else {%%00010                colorScale = d3.scale.category10();%%00010            }%%00010        }%%00010    };%%00010%%00010    /**%%00010     * switched - if the chart update was triggered by changing the &quot;include 'Missing values' category&quot; option in the%%00010     * view%%00010     */%%00010    processMissingValues = function (switched) {%%00010        // Missing values post-processing%%00010        if (missValCatValue !== null) { // null means there's no missing value in the category column at%%00010                                                // all%%00010            if (_value.options.includeMissValCat &amp;&amp; _representation.options.reportOnMissingValues) {%%00010                // add missing values category%%00010                var label = 'Missing values';%%00010                if (missValCatValue === null) {%%00010                    excludeCat.push(label);%%00010                } else {%%00010                    plotData.push({%%00010                        label: label,%%00010                        value: missValCatValue%%00010                    });%%00010                }%%00010            } else if (switched) {%%00010                // remove missing values category, but only if we have triggered switch from the view%%00010                // otherwise there's nothing to remove yet%%00010                if (missValCatValue === null) {%%00010                    excludeCat.pop();%%00010                } else {%%00010                    plotData.pop();%%00010                }%%00010            }%%00010        }%%00010%%00010        // Set warning messages%%00010        if (!showWarnings) {%%00010            return;%%00010        }%%00010        if (plotData.length === 0) {%%00010            // No data available warnings%%00010            var str;%%00010            if (missValCatValue !== null &amp;&amp;%%00010                _representation.options.reportOnMissingValues) {%%00010                str = 'No chart was generated since the frequency column has only missing values.\n ' +%%00010                'There are values where the category name is missing.\nTo see them switch on the option' +%%00010                '&quot;Include \'Missing values\' category&quot; in the view settings.';%%00010            } else {%%00010                str = 'No chart was generated since the frequency column has only missing values or empty.\n' +%%00010                'Re-run the workflow with different data.';%%00010            }%%00010            knimeService.setWarningMessage(str, NO_DATA_AVAILABLE);%%00010        } else if (excludeCat.length &gt; 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010            knimeService.setWarningMessage('Categories \'' + excludeCat.join('\', \'') +%%00010                '\' have only missing values in the frequency column and were excluded from the view.',%%00010                MISSING_VALUES_ONLY);%%00010        } else {%%00010            knimeService.clearWarningMessage(MISSING_VALUES_ONLY);%%00010        }%%00010    };%%00010%%00010    // eslint-disable-next-line%%00010    drawControls = function () {%%00010        if (!knimeService) {%%00010            return;%%00010        }%%00010%%00010        if (_representation.options.displayFullscreenButton) {%%00010            knimeService.allowFullscreen();%%00010        }%%00010%%00010        if (!_representation.options.enableViewControls) {%%00010            return;%%00010        }%%00010%%00010        var titleEdit = _representation.options.enableTitleEdit;%%00010        var subtitleEdit = _representation.options.enableSubtitleEdit;%%00010        var donutToggle = _representation.options.enableDonutToggle;%%00010        var holeEdit = _representation.options.enableHoleEdit;%%00010        // var insideTitleEdit = _representation.options.enableInsideTitleEdit;%%00010        // var colChooser = _representation.options.enableColumnChooser;%%00010        var labelEdit = _representation.options.enableLabelEdit;%%00010        var switchMissValCat = _representation.options.enableSwitchMissValCat;%%00010        var enableSelection = _representation.options.enableSelection;%%00010        var displayClearButton = _representation.options.displayClearSelectionButton;%%00010%%00010        if (titleEdit || subtitleEdit) {%%00010            if (titleEdit) {%%00010                var chartTitleText = knimeService.createMenuTextField('chartTitleText', _value.options.title,%%00010                    function () {%%00010                        if (_value.options.title !== this.value) {%%00010                            _value.options.title = this.value;%%00010                            updateTitles(true);%%00010                        }%%00010                    }, true);%%00010                knimeService.addMenuItem('Chart Title:', 'header', chartTitleText);%%00010            }%%00010            if (subtitleEdit) {%%00010                var chartSubtitleText = knimeService.createMenuTextField('chartSubtitleText', _value.options.subtitle,%%00010                    function () {%%00010                        if (_value.options.subtitle !== this.value) {%%00010                            _value.options.subtitle = this.value;%%00010                            updateTitles(true);%%00010                        }%%00010                    }, true);%%00010                knimeService.addMenuItem('Chart Subtitle:', 'header', chartSubtitleText, null,%%00010                    knimeService.SMALL_ICON);%%00010            }%%00010            if (/* colChooser || */labelEdit || donutToggle || holeEdit /* || insideTitleEdit */) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        /*%%00010         * if (colChooser) { // filter out non number columns var colNames = _representation.inObjects[0].spec.colNames;%%00010         * var colTypes = _representation.inObjects[0].spec.colTypes; var numberColumns = []; for (var i = 0; i &lt;%%00010         * colNames.length; i++) { if (colTypes[i] == &quot;number&quot;) { numberColumns.push(colNames[i]); } } var colSelect =%%00010         * knimeService.createMenuSelect('columnSelect', _value.options.freq, numberColumns, function() {%%00010         * _value.options.freq = this.value; updateData(true); }); knimeService.addMenuItem('Column:', 'minus-square%%00010         * fa-rotate-90', colSelect);%%00010         *%%00010         * if (labelEdit || donutToggle || holeEdit || insideTitleEdit) { knimeService.addMenuDivider(); } }%%00010         */%%00010%%00010        if (labelEdit) {%%00010            var labelCbx = knimeService.createMenuCheckbox('labelCbx', _value.options.showLabels, function () {%%00010                if (_value.options.showLabels !== this.checked) {%%00010                    _value.options.showLabels = this.checked;%%00010                    chart.showLabels(this.checked);%%00010                    d3.selectAll('#labelType input').property('disabled', !_value.options.showLabels);%%00010                    // workaround for nvd3 bug, remove labels manually%%00010                    if (!this.checked) {%%00010                        d3.selectAll('.nv-pieLabels *').remove();%%00010                    }%%00010                    chart.update();%%00010                }%%00010            });%%00010            knimeService.addMenuItem('Show labels:', 'comment-o', labelCbx);%%00010%%00010            var labelTypeRadio = knimeService.createInlineMenuRadioButtons('labelType', 'labelType', 'Value', ['Key',%%00010                'Value', 'Percent'], function () {%%00010                    _value.options.labelType = this.value;%%00010                    chart.labelType(this.value.toLowerCase());%%00010                    chart.update();%%00010                });%%00010            knimeService.addMenuItem('Label type:', 'commenting-o', labelTypeRadio);%%00010%%00010            if (switchMissValCat || donutToggle || holeEdit) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        if (switchMissValCat &amp;&amp; missValCatValue !== null &amp;&amp; _representation.options.reportOnMissingValues) {%%00010            var switchMissValCatCbx = knimeService.createMenuCheckbox('switchMissValCatCbx',%%00010                _value.options.includeMissValCat, function () {%%00010                    if (_value.options.includeMissValCat !== this.checked) {%%00010                        _value.options.includeMissValCat = this.checked;%%00010                        processMissingValues(true);%%00010                        chart.update();%%00010                    }%%00010                });%%00010            knimeService.addMenuItem('Include \'Missing values\' category: ', 'question', switchMissValCatCbx);%%00010%%00010            if (donutToggle || holeEdit) {%%00010                knimeService.addMenuDivider();%%00010            }%%00010        }%%00010%%00010        if (donutToggle || holeEdit /* || insideTitleEdit */) {%%00010            if (donutToggle) {%%00010                var donutCbx = knimeService.createMenuCheckbox('donutCbx', _value.options.togglePie, function () {%%00010                    if (_value.options.togglePie !== this.checked) {%%00010                        _value.options.togglePie = this.checked;%%00010                        chart.donut(this.checked);%%00010                        d3.selectAll('#insideTitleText, #holeRatioText')%%00010                            .property('disabled', !_value.options.togglePie);%%00010                        chart.update();%%00010                    }%%00010                });%%00010                knimeService.addMenuItem('Render donut chart:', knimeService.createStackedIcon('gear', 'circle-o'),%%00010                    donutCbx);%%00010            }%%00010%%00010            if (holeEdit) {%%00010                var holeRatioText = knimeService.createMenuTextField('holeRatioText', _value.options.holeSize,%%00010                    function () {%%00010                        if (this.value &lt; 0) {%%00010                            this.value = 0;%%00010                        } else if (this.value &gt; 1) {%%00010                            this.value = 1;%%00010                        }%%00010                        chart.donutRatio(this.value);%%00010                        chart.update();%%00010                    }, true);%%00010                holeRatioText.setAttribute('type', 'number');%%00010                holeRatioText.setAttribute('min', 0);%%00010                holeRatioText.setAttribute('max', 1);%%00010                holeRatioText.setAttribute('step', 0.1);%%00010                holeRatioText.disabled = !_value.options.togglePie;%%00010                knimeService.addMenuItem('Donut hole ratio:', 'adjust', holeRatioText);%%00010            }%%00010%%00010            /*%%00010             * if (insideTitleEdit) { var insideTitleText = knimeService.createMenuTextField('insideTitleText',%%00010             * _value.options.insideTitle, function() { if (_value.options.insideTitle != this.value) {%%00010             * _value.options.insideTitle = this.value; chart.title(this.value); chart.update(); } }, true);%%00010             * insideTitleText.disabled = !_value.options.togglePie; knimeService.addMenuItem('Title inside:', 'header',%%00010             * insideTitleText, null, knimeService.SMALL_ICON); }%%00010             */%%00010%%00010            if (enableSelection) {%%00010                knimeService.addMenuDivider();%%00010                var subscribeToSelectionIcon = knimeService.createStackedIcon('check-square-o', 'angle-double-right',%%00010                    'faded right sm', 'left bold');%%00010                var subscribeToSelectionMenu = knimeService.createMenuCheckbox('subscribeToSelection',%%00010                    _value.options.subscribeToSelection, function () {%%00010                        if (_value.options.subscribeToSelection !== this.checked) {%%00010                            _value.options.subscribeToSelection = this.checked;%%00010                            subscribeToSelection(_value.options.subscribeToSelection);%%00010                        }%%00010                    });%%00010                knimeService.addMenuItem('Subscribe to selection:', subscribeToSelectionIcon, subscribeToSelectionMenu);%%00010%%00010                var publishSelectionIcon = knimeService.createStackedIcon('check-square-o', 'angle-right',%%00010                    'faded left sm', 'right bold');%%00010                var publishSelectionMenu = knimeService.createMenuCheckbox('publishSelection',%%00010                    _value.options.publishSelection, function () {%%00010                        if (_value.options.publishSelection !== this.checked) {%%00010                            _value.options.publishSelection = this.checked;%%00010                            publishSelection(this.checked);%%00010                        }%%00010                    });%%00010                knimeService.addMenuItem('Publish selection:', publishSelectionIcon, publishSelectionMenu);%%00010            }%%00010%%00010            if (displayClearButton &amp;&amp; _representation.options.enableSelection) {%%00010                knimeService.addButton('clearSelectionButton', 'minus-square-o', 'Clear selection', function () {%%00010                    d3.selectAll('.row').classed({%%00010                        selected: false,%%00010                        'knime-selected': false,%%00010                        unselected: false%%00010                    });%%00010                    removeHilightBar('', true);%%00010                    _value.options.selection = [];%%00010                    publishSelection(true);%%00010                });%%00010                d3.select('#clearSelectionButton').classed('inactive', true);%%00010            }%%00010        }%%00010    };%%00010%%00010    setCssClasses = function () {%%00010        d3.selectAll('.nv-label').classed('knime-label', true);%%00010%%00010        // legend%%00010        d3.selectAll('.nv-legendWrap')%%00010            .classed('knime-legend', true);%%00010        d3.selectAll('.nv-legend-symbol')%%00010            .classed('knime-legend-symbol', true);%%00010        d3.selectAll('.nv-legend-text')%%00010            .classed('knime-legend-label', true);%%00010        if (_representation.options.enableSelection) {%%00010            registerClickHandler();%%00010        }%%00010    };%%00010%%00010    setTooltipCssClasses = function () {%%00010        // tooltip%%00010        var tooltip = d3.selectAll('.nvtooltip')%%00010            .style('display', 'block')%%00010            .classed('knime-tooltip', true);%%00010        tooltip.selectAll('.x-value')%%00010            .classed('knime-tooltip-caption', true)%%00010            .classed('knime-x', true);%%00010        tooltip.selectAll('.legend-color-guide')%%00010            .classed('knime-tooltip-color', true);%%00010        tooltip.selectAll('.key')%%00010            .classed('knime-tooltip-key', true);%%00010        tooltip.selectAll('.value')%%00010            .classed('knime-tooltip-value', true);%%00010    };%%00010    %%00010    hideTooltips = function () {%%00010        d3.selectAll('.nvtooltip').style('display', 'none');%%00010    };%%00010%%00010    pie.validate = function () {%%00010        return true;%%00010    };%%00010%%00010    pie.getComponentValue = function () {%%00010        return _value;%%00010    };%%00010%%00010    pie.getSVG = function () {%%00010        // correct faulty rect elements%%00010        d3.selectAll('rect').each(function () {%%00010            var rect = d3.select(this);%%00010            if (!rect.attr('width')) {%%00010                rect.attr('width', 0);%%00010            }%%00010            if (!rect.attr('height')) {%%00010                rect.attr('height', 0);%%00010            }%%00010        });%%00010%%00010        var svgElement = d3.select('svg')[0][0];%%00010        knimeService.inlineSvgStyles(svgElement);%%00010%%00010        // Return the SVG as a string.%%00010        return (new XMLSerializer()).serializeToString(svgElement);%%00010    };%%00010%%00010    return pie;%%00010%%00010})();%%00010"/>
    </config>
    <config key="cssCode">
        <entry key="array-size" type="xint" value="1"/>
        <entry key="0" type="xstring" value="text.knime-tick-label.knime-selected {%%00010%%00009font-weight: bold;%%00010}%%00010path.knime-selected {%%00010%%00009fill: orange;%%00010%%00009%%00010}%%00010path.knime-partially-selected {%%00010%%00009fill: grey;%%00010}%%00010text.knime-tick-label.knime-partially-selected {%%00010%%00009font-weight: bold;%%00010}%%00010%%00010path.nv-bar.positive {%%00010%%00009cursor:pointer;%%00010}%%00010/* Overwrite the default title fill of pie/donut chart because the default has bad contrast */%%00010.nvd3.nv-pie text.nv-pie-title {%%00010%%00009fill: black;%%00010}"/>
    </config>
    <config key="jsDependencies">
        <entry key="numSettings" type="xint" value="2"/>
        <config key="dependency_0">
            <entry key="name" type="xstring" value="nvd3"/>
            <entry key="path" type="xstring" value="js-lib/nvd3/nv.d3.v1_8_1.min.js"/>
            <entry key="usesDefine" type="xboolean" value="false"/>
            <entry key="exports" type="xstring" value="nv"/>
            <config key="dependencies">
                <entry key="array-size" type="xint" value="1"/>
                <entry key="0" type="xstring" value="D3_3.5.5"/>
            </config>
            <entry key="local" type="xboolean" value="true"/>
        </config>
        <config key="dependency_1">
            <entry key="name" type="xstring" value="D3_3.5.5"/>
            <entry key="path" type="xstring" value="js-lib/d3/d3.v3_5_5.min.js"/>
            <entry key="usesDefine" type="xboolean" value="false"/>
            <entry key="exports" type="xstring" isnull="true" value=""/>
            <config key="dependencies">
                <entry key="array-size" type="xint" value="0"/>
            </config>
            <entry key="local" type="xboolean" value="true"/>
        </config>
    </config>
    <config key="cssDependencies">
        <entry key="array-size" type="xint" value="1"/>
        <entry key="0" type="xstring" value="js-lib/nvd3/nv.d3.v1_8_1.min.css"/>
    </config>
    <entry key="new" type="xboolean" value="false"/>
    <entry key="inView" type="xboolean" value="true"/>
    <config key="tableIds">
        <entry key="array-size" type="xint" value="1"/>
        <entry key="0" type="xstring" value="a65839ef-1fbc-4749-9228-f332eb8e3c4b"/>
    </config>
    <config key="variables">
        <entry key="numSettings" type="xint" value="1"/>
        <entry key="mapClass" type="xstring" value="string"/>
        <entry key="key_0" type="xstring" value="knime.workspace"/>
        <entry key="class_0" type="xstring" value="java.lang.String"/>
        <entry key="value_0" type="xstring" value="F:\37. Projet 07\10. Knime"/>
    </config>
    <config key="binaryFiles">
        <entry key="numSettings" type="xint" value="0"/>
        <entry key="mapClass" type="xstring" value="string"/>
    </config>
    <config key="options">
        <entry key="numSettings" type="xint" value="21"/>
        <entry key="mapClass" type="xstring" value="object"/>
        <entry key="key_0" type="xstring" value="displayFullscreenButton"/>
        <entry key="class_0" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_0" type="xboolean" value="true"/>
        <entry key="key_1" type="xstring" value="displayClearSelectionButton"/>
        <entry key="class_1" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_1" type="xboolean" value="true"/>
        <entry key="key_2" type="xstring" value="enableHoleEdit"/>
        <entry key="class_2" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_2" type="xboolean" value="true"/>
        <entry key="key_3" type="xstring" value="svg"/>
        <entry key="class_3" type="xstring" value="org.knime.dynamic.js.SettingsModelSVGOptions$JSONSVGOptions"/>
        <config key="value_3">
            <entry key="width" type="xint" value="600"/>
            <entry key="height" type="xint" value="400"/>
            <entry key="fullscreen" type="xboolean" value="true"/>
        </config>
        <entry key="key_4" type="xstring" value="legend"/>
        <entry key="class_4" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_4" type="xboolean" value="true"/>
        <entry key="key_5" type="xstring" value="enableInsideTitleEdit"/>
        <entry key="class_5" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_5" type="xboolean" value="true"/>
        <entry key="key_6" type="xstring" value="customColors"/>
        <entry key="class_6" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_6" type="xboolean" value="true"/>
        <entry key="key_7" type="xstring" value="enableTitleEdit"/>
        <entry key="class_7" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_7" type="xboolean" value="true"/>
        <entry key="key_8" type="xstring" value="enableSelection"/>
        <entry key="class_8" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_8" type="xboolean" value="true"/>
        <entry key="key_9" type="xstring" value="enableDonutToggle"/>
        <entry key="class_9" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_9" type="xboolean" value="true"/>
        <entry key="key_10" type="xstring" value="enableLabelEdit"/>
        <entry key="class_10" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_10" type="xboolean" value="true"/>
        <entry key="key_11" type="xstring" value="enableSwitchMissValCat"/>
        <entry key="class_11" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_11" type="xboolean" value="true"/>
        <entry key="key_12" type="xstring" value="processInMemory"/>
        <entry key="class_12" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_12" type="xboolean" value="true"/>
        <entry key="key_13" type="xstring" value="reportOnMissingValues"/>
        <entry key="class_13" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_13" type="xboolean" value="true"/>
        <entry key="key_14" type="xstring" value="labelThreshold"/>
        <entry key="class_14" type="xstring" value="java.lang.Double"/>
        <entry key="value_14" type="xdouble" value="0.05"/>
        <entry key="key_15" type="xstring" value="cat"/>
        <entry key="class_15" type="xstring" value="java.lang.String"/>
        <entry key="value_15" type="xstring" value="Contrat"/>
        <entry key="key_16" type="xstring" value="enableViewControls"/>
        <entry key="class_16" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_16" type="xboolean" value="true"/>
        <entry key="key_17" type="xstring" value="enableColumnChooser"/>
        <entry key="class_17" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_17" type="xboolean" value="true"/>
        <entry key="key_18" type="xstring" value="showWarnings"/>
        <entry key="class_18" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_18" type="xboolean" value="true"/>
        <entry key="key_19" type="xstring" value="enableSubtitleEdit"/>
        <entry key="class_19" type="xstring" value="java.lang.Boolean"/>
        <entry key="value_19" type="xboolean" value="true"/>
        <entry key="key_20" type="xstring" value="aggr"/>
        <entry key="class_20" type="xstring" value="java.lang.String"/>
        <entry key="value_20" type="xstring" value="Occurence Count"/>
    </config>
    <config key="inObjects">
        <entry key="numSettings" type="xint" value="1"/>
        <config key="inObject_0">
            <entry key="className" type="xstring" value="org.knime.dynamic.js.base.grouped.GroupedProcessor$GroupingResult"/>
            <entry key="jsonValue" type="xstring" value="{&quot;translator&quot;:{&quot;mapping&quot;:{&quot;Row0&quot;:[&quot;Row208_Row47_Row213&quot;,&quot;Row74_Row181_Row111&quot;,&quot;Row92_Row163_Row12&quot;,&quot;Row80_Row175_Row31&quot;,&quot;Row76_Row179_Row231&quot;,&quot;Row135_Row120_Row30&quot;,&quot;Row33_Row222_Row3&quot;,&quot;Row83_Row172_Row217&quot;,&quot;Row3_Row252_Row154&quot;,&quot;Row236_Row19_Row89&quot;,&quot;Row171_Row84_Row86&quot;,&quot;Row61_Row194_Row225&quot;,&quot;Row239_Row16_Row105&quot;,&quot;Row160_Row95_Row229&quot;,&quot;Row29_Row226_Row119&quot;,&quot;Row220_Row35_Row19&quot;,&quot;Row98_Row157_Row109&quot;,&quot;Row137_Row118_Row148&quot;,&quot;Row89_Row166_Row145&quot;,&quot;Row202_Row53_Row36&quot;,&quot;Row66_Row189_Row214&quot;,&quot;Row7_Row248_Row203&quot;,&quot;Row198_Row57_Row230&quot;,&quot;Row192_Row63_Row16&quot;,&quot;Row193_Row62_Row190&quot;,&quot;Row70_Row185_Row108&quot;,&quot;Row246_Row9_Row70&quot;,&quot;Row109_Row146_Row239&quot;,&quot;Row141_Row114_Row24&quot;,&quot;Row249_Row6_Row76&quot;,&quot;Row221_Row34_Row6&quot;,&quot;Row114_Row141_Row41&quot;,&quot;Row106_Row149_Row29&quot;,&quot;Row156_Row99_Row215&quot;,&quot;Row210_Row45_Row82&quot;,&quot;Row158_Row97_Row88&quot;,&quot;Row146_Row109_Row132&quot;,&quot;Row153_Row102_Row156&quot;,&quot;Row118_Row137_Row120&quot;,&quot;Row136_Row119_Row33&quot;,&quot;Row63_Row192_Row184&quot;,&quot;Row164_Row91_Row162&quot;,&quot;Row178_Row77_Row54&quot;,&quot;Row88_Row167_Row22&quot;,&quot;Row121_Row134_Row93&quot;,&quot;Row102_Row153_Row49&quot;,&quot;Row21_Row234_Row61&quot;,&quot;Row170_Row85_Row179&quot;,&quot;Row183_Row72_Row176&quot;,&quot;Row131_Row124_Row157&quot;,&quot;Row144_Row111_Row38&quot;,&quot;Row117_Row138_Row122&quot;,&quot;Row20_Row235_Row151&quot;,&quot;Row24_Row231_Row186&quot;,&quot;Row235_Row20_Row175&quot;,&quot;Row174_Row81_Row58&quot;,&quot;Row108_Row147_Row39&quot;,&quot;Row191_Row64_Row92&quot;,&quot;Row65_Row190_Row200&quot;,&quot;Row181_Row74_Row143&quot;,&quot;Row105_Row150_Row172&quot;,&quot;Row165_Row90_Row219&quot;,&quot;Row78_Row177_Row48&quot;,&quot;Row247_Row8_Row187&quot;,&quot;Row219_Row36_Row100&quot;,&quot;Row201_Row54_Row182&quot;,&quot;Row48_Row207_Row196&quot;,&quot;Row27_Row228_Row152&quot;,&quot;Row93_Row162_Row104&quot;,&quot;Row86_Row169_Row233&quot;,&quot;Row62_Row193_Row216&quot;,&quot;Row53_Row202_Row202&quot;,&quot;Row104_Row151_Row57&quot;,&quot;Row40_Row215_Row131&quot;,&quot;Row30_Row225_Row117&quot;,&quot;Row71_Row184_Row165&quot;,&quot;Row190_Row65_Row146&quot;,&quot;Row253_Row2_Row126&quot;,&quot;Row55_Row200_Row181&quot;,&quot;Row90_Row165_Row45&quot;,&quot;Row122_Row133_Row52&quot;,&quot;Row182_Row73_Row95&quot;,&quot;Row248_Row7_Row178&quot;,&quot;Row58_Row197_Row96&quot;,&quot;Row231_Row24_Row103&quot;,&quot;Row132_Row123_Row9&quot;,&quot;Row162_Row93_Row226&quot;,&quot;Row57_Row198_Row194&quot;,&quot;Row140_Row115_Row27&quot;,&quot;Row44_Row211_Row65&quot;,&quot;Row148_Row107_Row81&quot;,&quot;Row185_Row70_Row47&quot;,&quot;Row4_Row251_Row185&quot;,&quot;Row101_Row154_Row164&quot;,&quot;Row211_Row44_Row77&quot;,&quot;Row179_Row76_Row99&quot;,&quot;Row28_Row227_Row87&quot;,&quot;Row46_Row209_Row85&quot;,&quot;Row87_Row168_Row147&quot;,&quot;Row52_Row203_Row2&quot;,&quot;Row42_Row213_Row94&quot;,&quot;Row36_Row219_Row206&quot;,&quot;Row213_Row42_Row98&quot;,&quot;Row168_Row87_Row189&quot;,&quot;Row159_Row96_Row195&quot;,&quot;Row216_Row39_Row232&quot;,&quot;Row9_Row246_Row25&quot;,&quot;Row252_Row3_Row42&quot;,&quot;Row175_Row80_Row168&quot;,&quot;Row134_Row121_Row20&quot;,&quot;Row16_Row239_Row121&quot;,&quot;Row39_Row216_Row208&quot;,&quot;Row84_Row171_Row4&quot;,&quot;Row152_Row103_Row137&quot;,&quot;Row72_Row183_Row79&quot;,&quot;Row0_Row255_Row129&quot;,&quot;Row14_Row241_Row53&quot;,&quot;Row49_Row206_Row114&quot;,&quot;Row1_Row254_Row139&quot;,&quot;Row59_Row196_Row228&quot;,&quot;Row155_Row100_Row55&quot;,&quot;Row19_Row236_Row171&quot;,&quot;Row120_Row135_Row125&quot;,&quot;Row147_Row108_Row113&quot;,&quot;Row5_Row250_Row174&quot;,&quot;Row51_Row204_Row183&quot;,&quot;Row11_Row244_Row199&quot;,&quot;Row142_Row113_Row133&quot;,&quot;Row254_Row1_Row144&quot;,&quot;Row94_Row161_Row212&quot;,&quot;Row204_Row51_Row14&quot;,&quot;Row85_Row170_Row223&quot;,&quot;Row73_Row182_Row32&quot;,&quot;Row237_Row18_Row0&quot;,&quot;Row25_Row230_Row221&quot;,&quot;Row31_Row224_Row123&quot;,&quot;Row10_Row245_Row18&quot;,&quot;Row6_Row249_Row110&quot;,&quot;Row180_Row75_Row201&quot;,&quot;Row96_Row159_Row68&quot;,&quot;Row166_Row89_Row1&quot;,&quot;Row50_Row205_Row66&quot;,&quot;Row161_Row94_Row128&quot;,&quot;Row250_Row5_Row149&quot;,&quot;Row126_Row129_Row50&quot;,&quot;Row234_Row21_Row134&quot;,&quot;Row69_Row186_Row63&quot;,&quot;Row233_Row22_Row97&quot;,&quot;Row167_Row88_Row135&quot;,&quot;Row34_Row221_Row238&quot;,&quot;Row232_Row23_Row211&quot;,&quot;Row110_Row145_Row84&quot;,&quot;Row188_Row67_Row163&quot;,&quot;Row157_Row98_Row80&quot;,&quot;Row227_Row28_Row237&quot;,&quot;Row81_Row174_Row21&quot;,&quot;Row206_Row49_Row240&quot;,&quot;Row60_Row195_Row115&quot;,&quot;Row245_Row10_Row210&quot;,&quot;Row112_Row143_Row161&quot;,&quot;Row243_Row12_Row35&quot;,&quot;Row67_Row188_Row193&quot;,&quot;Row54_Row201_Row67&quot;,&quot;Row32_Row223_Row90&quot;,&quot;Row143_Row112_Row167&quot;,&quot;Row200_Row55_Row227&quot;,&quot;Row82_Row173_Row10&quot;,&quot;Row77_Row178_Row116&quot;,&quot;Row37_Row218_Row112&quot;,&quot;Row197_Row58_Row205&quot;,&quot;Row139_Row116_Row140&quot;,&quot;Row217_Row38_Row207&quot;,&quot;Row95_Row160_Row59&quot;,&quot;Row75_Row180_Row107&quot;,&quot;Row205_Row50_Row170&quot;,&quot;Row150_Row105_Row222&quot;,&quot;Row35_Row220_Row224&quot;,&quot;Row255_Row0_Row34&quot;,&quot;Row241_Row14_Row124&quot;,&quot;Row194_Row61_Row150&quot;,&quot;Row123_Row132_Row141&quot;,&quot;Row127_Row128_Row5&quot;,&quot;Row242_Row13_Row60&quot;,&quot;Row149_Row106_Row37&quot;,&quot;Row145_Row110_Row44&quot;,&quot;Row212_Row43_Row83&quot;,&quot;Row41_Row214_Row234&quot;,&quot;Row107_Row148_Row177&quot;,&quot;Row138_Row117_Row204&quot;,&quot;Row64_Row191_Row118&quot;,&quot;Row8_Row247_Row75&quot;,&quot;Row226_Row29_Row153&quot;,&quot;Row99_Row156_Row138&quot;,&quot;Row12_Row243_Row15&quot;,&quot;Row151_Row104_Row158&quot;,&quot;Row97_Row158_Row191&quot;,&quot;Row47_Row208_Row8&quot;,&quot;Row115_Row140_Row130&quot;,&quot;Row129_Row126_Row101&quot;,&quot;Row91_Row164_Row17&quot;,&quot;Row17_Row238_Row106&quot;,&quot;Row244_Row11_Row56&quot;,&quot;Row116_Row139_Row71&quot;,&quot;Row223_Row32_Row180&quot;,&quot;Row2_Row253_Row136&quot;,&quot;Row154_Row101_Row142&quot;,&quot;Row45_Row210_Row46&quot;,&quot;Row38_Row217_Row91&quot;,&quot;Row186_Row69_Row26&quot;,&quot;Row177_Row78_Row127&quot;,&quot;Row119_Row136_Row155&quot;,&quot;Row128_Row127_Row62&quot;,&quot;Row238_Row17_Row236&quot;,&quot;Row195_Row60_Row69&quot;,&quot;Row103_Row152_Row173&quot;,&quot;Row13_Row242_Row73&quot;,&quot;Row176_Row79_Row51&quot;,&quot;Row133_Row122_Row7&quot;,&quot;Row163_Row92_Row64&quot;,&quot;Row15_Row240_Row11&quot;,&quot;Row240_Row15_Row23&quot;,&quot;Row124_Row131_Row40&quot;,&quot;Row22_Row233_Row159&quot;,&quot;Row56_Row199_Row198&quot;,&quot;Row224_Row31_Row28&quot;,&quot;Row79_Row176_Row160&quot;,&quot;Row26_Row229_Row72&quot;,&quot;Row222_Row33_Row13&quot;,&quot;Row184_Row71_Row43&quot;,&quot;Row225_Row30_Row197&quot;,&quot;Row125_Row130_Row209&quot;,&quot;Row230_Row25_Row220&quot;,&quot;Row215_Row40_Row102&quot;,&quot;Row228_Row27_Row169&quot;,&quot;Row218_Row37_Row74&quot;,&quot;Row172_Row83_Row218&quot;,&quot;Row196_Row59_Row192&quot;,&quot;Row214_Row41_Row166&quot;,&quot;Row100_Row155_Row188&quot;,&quot;Row43_Row212_Row78&quot;],&quot;Row1&quot;:[&quot;Row203_Row52_Row244&quot;,&quot;Row199_Row56_Row254&quot;,&quot;Row207_Row48_Row246&quot;,&quot;Row130_Row125_Row243&quot;,&quot;Row18_Row237_Row251&quot;,&quot;Row189_Row66_Row241&quot;,&quot;Row209_Row46_Row245&quot;,&quot;Row111_Row144_Row248&quot;,&quot;Row187_Row68_Row253&quot;,&quot;Row113_Row142_Row255&quot;,&quot;Row173_Row82_Row250&quot;,&quot;Row251_Row4_Row235&quot;,&quot;Row229_Row26_Row247&quot;,&quot;Row169_Row86_Row252&quot;,&quot;Row68_Row187_Row242&quot;,&quot;Row23_Row232_Row249&quot;]},&quot;sourceID&quot;:null,&quot;targetIDs&quot;:null,&quot;forward&quot;:false},&quot;table&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTable&quot;,&quot;rows&quot;:[{&quot;data&quot;:[&quot;CDI&quot;,240.0],&quot;rowKey&quot;:&quot;Row0&quot;},{&quot;data&quot;:[&quot;CDD&quot;,16.0],&quot;rowKey&quot;:&quot;Row1&quot;}],&quot;id&quot;:&quot;32d9afa7-bb2e-49ed-9efa-b1b3d0f983fc&quot;,&quot;fragment&quot;:false,&quot;filtered&quot;:false,&quot;dataHash&quot;:null,&quot;totalRows&quot;:0,&quot;spec&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTableSpec&quot;,&quot;possibleValues&quot;:[[&quot;CDI&quot;,&quot;CDD&quot;],null],&quot;containsMissingValues&quot;:[false,false],&quot;minValues&quot;:[&quot;CDD&quot;,16.0],&quot;maxValues&quot;:[&quot;CDI&quot;,240.0],&quot;rowColorValues&quot;:[&quot;#B3DE69&quot;,&quot;#FDB462&quot;],&quot;hiddenColumns&quot;:[],&quot;rowSizeValues&quot;:null,&quot;numExtensions&quot;:0,&quot;extensionTypes&quot;:[],&quot;extensionNames&quot;:[],&quot;numColumns&quot;:2,&quot;colTypes&quot;:[&quot;string&quot;,&quot;number&quot;],&quot;colNames&quot;:[&quot;Contrat&quot;,&quot;Contrat_1&quot;],&quot;knimeTypes&quot;:[&quot;String&quot;,&quot;Number (integer)&quot;],&quot;numRows&quot;:2,&quot;colorModels&quot;:[{&quot;type&quot;:&quot;nominal&quot;,&quot;colors&quot;:[&quot;#FDB462&quot;,&quot;#B3DE69&quot;],&quot;labels&quot;:[&quot;CDD&quot;,&quot;CDI&quot;],&quot;title&quot;:&quot;Contrat&quot;}],&quot;filterIds&quot;:[null,null]},&quot;totalFilteredRows&quot;:0,&quot;fragmentFirstRowIndex&quot;:0},&quot;uuid&quot;:&quot;2073be61-2d14-4bdb-8cb4-c974316ef70e&quot;}"/>
        </config>
    </config>
    <entry key="warnMessage" type="xstring" value=""/>
    <entry key="errorMessage" type="xstring" value=""/>
</config>
